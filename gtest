#include <gtest/gtest.h>
#include "ZipFileExtractorWrapper.h"
#include <fstream>
#include <filesystem>
#include <map>
#include <string>

class ZipFileExtractorWrapperTest : public ::testing::Test {
protected:
    ZipFileExtractorWrapper wrapper;

    std::string valid_zip_path = "test_data/test.zip";
    std::string invalid_zip_path = "non_existent.zip";

    std::map<std::string, std::string> valid_map = {
        {"file1.txt", "output/file1.txt"},
        {"file2.txt", "output/file2.txt"}
    };

    // SetUp 和 TearDown 用于每个 TEST_F 前后
    void SetUp() override {
        CreateDummyZipFile(valid_zip_path);
    }

    void TearDown() override {
        CleanupTestEnvironment();
    }

    // ✅ 创建测试 zip 文件
    void CreateDummyZipFile(const std::string& path) {
        std::filesystem::create_directories("test_data");
        std::ofstream file(path);
        if (file.is_open()) {
            file << "FAKE ZIP CONTENT";
        }
    }

    // ✅ 创建空 zip 或无效 zip
    void CreateEmptyZipFile(const std::string& path) {
        std::filesystem::create_directories("test_data");
        std::ofstream file(path); // 创建但不写入内容
    }

    // ✅ 清理所有临时文件和目录
    void CleanupTestEnvironment() {
        std::filesystem::remove_all("test_data");
        std::filesystem::remove_all("output");
    }

    // ✅ 创建一个错误的文件路径映射
    std::map<std::string, std::string> CreateInvalidFileMap() {
        return {
            {"", ""},
            {"  ", "invalid/"},
            {"\\x00", "\n"}
        };
    }

    // ✅ 检查某个解压目标文件是否被创建
    bool FileExists(const std::string& path) {
        return std::filesystem::exists(path);
    }
};
TEST_F(ZipFileExtractorWrapperTest, DecompressFailsOnEmptyZipFile) {
    CreateEmptyZipFile("test_data/empty.zip");

    bool result = wrapper.Decompress("test_data/empty.zip", valid_map, false);
    EXPECT_FALSE(result);
}
TEST_F(ZipFileExtractorWrapperTest, DecompressFailsOnInvalidMapping) {
    auto invalid_map = CreateInvalidFileMap();
    bool result = wrapper.Decompress(valid_zip_path, invalid_map, false);
    EXPECT_FALSE(result);
}
TEST_F(ZipFileExtractorWrapperTest, OutputFilesAreGeneratedOnSuccess) {
    bool result = wrapper.Decompress(valid_zip_path, valid_map, true);
    EXPECT_TRUE(result);
    EXPECT_TRUE(FileExists("output/file1.txt"));
    EXPECT_TRUE(FileExists("output/file2.txt"));
}

//////////////////////////////


// ZipFileExtractorWrapperTest.cpp
#include <gtest/gtest.h>
#include "ZipFileExtractorWrapper.h"
#include "GlobalTestConfig.h"
#include <fstream>
#include <filesystem>

class ZipFileExtractorWrapperTest : public ::testing::Test {
protected:
    ZipFileExtractorWrapper wrapper;
    std::string valid_zip_path;
    std::map<std::string, std::string> valid_map;

    void SetUp() override {
        // 从全局配置获取参数
        valid_zip_path = GlobalTestConfig::Instance().zip_path;
        valid_map = GlobalTestConfig::Instance().file_map;
        CreateDummyZipFile(valid_zip_path);
    }

    void TearDown() override {
        std::filesystem::remove_all("test_data");
        std::filesystem::remove_all("output");
    }

    void CreateDummyZipFile(const std::string& path) {
        std::filesystem::create_directories("test_data");
        std::ofstream(path) << "fake zip content";
    }
};

// 示例测试用例
TEST_F(ZipFileExtractorWrapperTest, DecompressSucceedsWithExternalZipPath) {
    bool result = wrapper.Decompress(valid_zip_path, valid_map, true);
    EXPECT_TRUE(result);
}
int main(int argc, char** argv) {
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <zip_path>" << std::endl;
        return 1;
    }

    // 初始化共享配置
    GlobalTestConfig::Instance().zip_path = argv[1];
    GlobalTestConfig::Instance().file_map = {
        {"file1.txt", "output/file1.txt"},
        {"file2.txt", "output/file2.txt"}
    };

    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

